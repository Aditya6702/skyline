
// SPDX-License-Identifier: MIT
pragma solidity >=0.6.12 <0.9.0;

contract Flights {
    struct Flight {
        string id;
        string image;
        string name;
        string model;
        Logs[] logs;
        mapping (string => string) maintenance;
    }

    struct Maintenance {
        string id;
        string issue;
        string solution;
        string cost;
    }

    struct Logs {
        string id;
        string details;
        string duration;
        string stamp;
        string fuel;
    }

    Flight[] public flightArray;
    Maintenance[] public maintArray;

    // Add this function to get the flight index
    function getFlightIndex(string memory _sid) internal view returns (uint8) {
        for (uint8 i = 0; i < flightArray.length; i++) {
            if (keccak256(abi.encodePacked(flightArray[i].id)) == keccak256(abi.encodePacked(_sid))) {
                return i;
            }
        }
        revert("Flight not found");
    }

    function addFlights(string memory _image, string memory _name, string memory _model, string memory _id) external {
        Flight storage newFlight = flightArray.push();
        newFlight.image = _image;
        newFlight.name = _name;
        newFlight.model = _model;
        newFlight.id = _id;
    }

    function getFlightAbs(string memory _sid) external view returns (string memory, string memory, string memory, string memory) {
        uint8 _flightIndex = getFlightIndex(_sid);
        return (flightArray[_flightIndex].image, flightArray[_flightIndex].name, flightArray[_flightIndex].model, flightArray[_flightIndex].id);
    }

    function getFlightDetail(string memory _sid) external view returns (string memory, string memory, string memory, string memory, string memory, string memory, string memory) {
        uint8 _index = getFlightIndex(_sid);
        return (
            flightArray[_index].name,
            flightArray[_index].model,
            flightArray[_index].maintenance["issue"],
            flightArray[_index].maintenance["solution"],
            flightArray[_index].maintenance["cost"],
            flightArray[_index].logs[flightArray[_index].logs.length - 1].details,
            flightArray[_index].logs[flightArray[_index].logs.length - 1].duration
        );
    }

    // ... (Other functions remain unchanged)
    function updateFlightLogs(string memory _logDetails, string memory _flightDuration, string memory _signature, string memory _sid) public {
        uint8 _flightIndex;
        for (uint8 i = 0; i < flightArray.length; i++) {
            if (keccak256(abi.encodePacked(flightArray[i].id)) == keccak256(abi.encodePacked(_sid))) {
                _flightIndex = i; // Return the index if the flight with the given id is found
            }
        }
        Flight storage currentFlight = flightArray[_flightIndex];
        Logs memory newLog;
        newLog.details = _logDetails;
        newLog.duration = _flightDuration;
        newLog.stamp = _signature;
        currentFlight.logs.push(newLog); // Add the new log to the logs array
    }

    function updateFlightMaintenance(string memory _issue, string memory _solution, string memory _verdict, string memory _cost, string memory _sid) public {
        uint8 _flightIndex;
        for (uint8 i = 0; i < flightArray.length; i++) {
            if (keccak256(abi.encodePacked(flightArray[i].id)) == keccak256(abi.encodePacked(_sid))) {
                _flightIndex = i; // Return the index if the flight with the given id is found
            }
        }
        Flight storage presentFlight = flightArray[_flightIndex];
        presentFlight.maintenance["issue"] = _issue;
        presentFlight.maintenance["solution"] = _solution;
        presentFlight.maintenance["verdict"] = _verdict;
        presentFlight.maintenance["cost"] = _cost;
    }

    function getFlightLogs(string memory _sid) public view returns (string[] memory, string[] memory) {
        uint8 _flightIndex = getFlightIndex(_sid);
        Logs[] storage logs = flightArray[_flightIndex].logs;
        string[] memory details = new string[](logs.length);
        string[] memory durations = new string[](logs.length);

        for (uint256 i = 0; i < logs.length; i++) {
            details[i] = logs[i].details;
            durations[i] = logs[i].duration;
        }

        return (details, durations);
    }
}
